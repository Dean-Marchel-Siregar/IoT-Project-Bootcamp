//Publisher

#include <WiFi.h>
#include "PubSubClient.h"

const int trigPin = 13;
const int echoPin = 12;

//define sound speed in cm/uS
#define SOUND_SPEED 0.034

long duration;
int distCm;

char clientId[50];

WiFiClient wifiClient;                // Membuat objek wifiClient
PubSubClient mqttClient(wifiClient);  // Membuat  objek mqttClient dengan konstruktor objek WiFiClient (Permintaan dari Lib)

char *mqttServer = "broker.hivemq.com";
// String mqttServer = "broker.hivemq.com";
int mqttPort = 1883;

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Callback - ");
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
  }
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println("Hello, ESP32!");
  reconnect();

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

  mqttClient.setServer(mqttServer, mqttPort); // Mengatur detail broker target  yang digunakan
  mqttClient.setCallback(callback);           // jika kita ingin menerima pesan untuk langganan yang dibuat oleh klien
  connectToBroker();
}


void loop() {
  // put your main code here, to run repeatedly:
   // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
   duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
   distCm = duration * SOUND_SPEED/2 + 1;

  // Prints the distance in the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distCm);
  
  char distString[8];
  dtostrf(distCm,1,1,distString); // Convert float to String
  mqttClient.publish("monitor/bendungan/distance", distString);

  // Mengirimkan data menggunakan MQTT
  delay(10); // this speeds up the simulation
}

void reconnect(){
  WiFi.mode(WIFI_STA);  // Assign esp as Station
  WiFi.begin("Wokwi-GUEST", "");
  while(WiFi.status()!=WL_CONNECTED){
    Serial.println(".");
    delay(100);
  }
  Serial.print("Status Koneksi : ");
  Serial.println(WiFi.status());
  Serial.println("ESP Telah Terkoneksi");
}

void connectToBroker() {
  Serial.println("Connecting to MQTT Broker...");
  while (!mqttClient.connected()) {
      Serial.println("Reconnecting to MQTT Broker..");
      String clientId = "ESP32Client-";
      clientId += String(random(0xffff), HEX);
      
      if (mqttClient.connect(clientId.c_str())) {
        Serial.println("Connected.");
      }      
  }
}
